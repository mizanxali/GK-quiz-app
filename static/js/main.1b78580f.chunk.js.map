{"version":3,"sources":["components/QuestionCard.styles.ts","API.ts","components/QuestionCard.tsx","utils.ts","App.styles.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","options","callback","userAnswer","totalQuestions","questionNumber","className","dangerouslySetInnerHTML","__html","map","item","correctAnswer","answer","value","disabled","onClick","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","quizOver","setQuizOver","console","log","startQuizHandler","EASY","newQuestions","length","undefined","event","currentTarget","isAnswerCorrect","answerObject","TOTAL_QUESTIONS","nextQuestionNumber","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b78580f.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct\r\n        ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\r\n        : !correct && userClicked\r\n        ? 'linear-gradient(90deg, #FF5656, #C16868)'\r\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\r\n    border: 3px solid #ffffff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`;","import { shuffleArray } from './utils'\r\n\r\nexport type Question = {\r\n    category: string\r\n    correct_answer: string\r\n    difficulty: string\r\n    incorrect_answers: string[]\r\n    question: string\r\n    type: string\r\n}\r\n\r\nexport type QuestionState = Question & {options: string[]}\r\n\r\nexport enum Difficulty {\r\n    EASY = 'easy',\r\n    MEDIUM = 'medium',\r\n    HARD = 'hard'\r\n}\r\n\r\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty): Promise<QuestionState[]> => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n    const data = await (await fetch(endpoint)).json();\r\n    return data.results.map((question: Question) => ({\r\n      ...question,\r\n      options: shuffleArray([...question.incorrect_answers, question.correct_answer])\r\n    }))\r\n};","import React from 'react'\r\nimport { AnswerObject } from '../App'\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\r\n\r\ntype props = {\r\n    question: string\r\n    options: string[]\r\n    callback: (event: React.MouseEvent<HTMLButtonElement>) => void\r\n    userAnswer: AnswerObject | undefined\r\n    questionNumber: number\r\n    totalQuestions: number\r\n}\r\n\r\nconst QuestionCard: React.FC<props> = ({question, options, callback, userAnswer, totalQuestions, questionNumber}) => {\r\n    return (\r\n        <Wrapper>\r\n            <p className='number'>Question {questionNumber}/{totalQuestions}</p>\r\n            <p dangerouslySetInnerHTML={{__html: question}}></p>\r\n            <div>\r\n                {options.map((item) => {\r\n                    return(\r\n                        <ButtonWrapper correct={userAnswer?.correctAnswer === item}\r\n                        userClicked={userAnswer?.answer === item} key={item}>\r\n                            <button value={item} disabled={userAnswer ? true : false} onClick={callback}><span dangerouslySetInnerHTML={{__html: item}}></span></button>\r\n                        </ButtonWrapper>\r\n                    )\r\n                })}\r\n            </div>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default QuestionCard","export const shuffleArray = (array: any[]) => [...array].sort(() => Math.random() - 0.5)","import styled from 'styled-components'\r\n// import bgimage from './assets/background-image.png'\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  > p {\r\n    color: #fff;\r\n  }\r\n  .score {\r\n    color: #fff;\r\n    font-size: 2rem;\r\n    font-weight: bold;\r\n    margin: 10px;\r\n  }\r\n  h1 {\r\n    font-family: Fascinate Inline;\r\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\r\n    font-weight: 400;\r\n    background-size: 100%;\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    -moz-background-clip: text;\r\n    -moz-text-fill-color: transparent;\r\n    filter: drop-shadow(2px 2px #0085a3);\r\n    font-size: 70px;\r\n    text-align: center;\r\n    margin: 20px;\r\n  }\r\n  .start, .next {\r\n    cursor: pointer;\r\n    background: linear-gradient(180deg, #ffffff, #ffcc91);\r\n    border: 2px solid #d38558;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n  }\r\n  .start {\r\n    max-width: 200px;\r\n  }\r\n`;","import React, { useState } from 'react'\nimport './App.css'\nimport QuestionCard from './components/QuestionCard'\nimport { QuestionState, Difficulty, fetchQuizQuestions } from './API'\nimport { Wrapper } from './App.styles'\n\nexport type AnswerObject = {\n  question: string\n  answer: string\n  isAnswerCorrect: boolean\n  correctAnswer: string\n}\n\nconst TOTAL_QUESTIONS = 10\n\nconst App = () => {\n\n  const [loading, setLoading] = useState(false)\n  const [questions, setQuestions] = useState<QuestionState[]>([])\n  const [number, setNumber] = useState(0)\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([])\n  const [score, setScore] = useState(0)\n  const [quizOver, setQuizOver] = useState(true)\n\n  console.log(questions)\n\n  const startQuizHandler = async () => {\n    //set initial state values\n    setLoading(true)\n    setQuizOver(false)\n    \n    //send API call\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY)\n    \n    //set remaining intital state values\n    setQuestions(newQuestions)\n    setScore(0)\n    setUserAnswers([])\n    setNumber(0)\n    setLoading(false)\n  }\n\n  const checkAnswerHandler = (event: React.MouseEvent<HTMLButtonElement>) => {\n    if(!quizOver) {\n      //receive answer from user\n      const answer = event.currentTarget.value\n      //check answer\n      const isAnswerCorrect = questions[number].correct_answer === answer\n      //incr score if answer correct\n      if(isAnswerCorrect)\n        setScore(score+1)\n      //store answer in userAnswers array\n      const answerObject = {\n        question: questions[number].question,\n        answer: answer,\n        isAnswerCorrect: isAnswerCorrect,\n        correctAnswer: questions[number].correct_answer\n      }\n      setUserAnswers([...userAnswers, answerObject])\n    }\n  }\n\n  const nextQuestionHandler = () => {\n    const nextQuestionNumber = number + 1\n    if(nextQuestionNumber === TOTAL_QUESTIONS) {\n      setQuizOver(true)\n    }\n    else {\n      setNumber(nextQuestionNumber)\n    }\n  }\n\n  return (\n    <Wrapper className=\"App\">\n      <h1>THE ULTIMATE GK QUIZ</h1>\n      {quizOver ? <button className='start' onClick={startQuizHandler}>START</button> : null}\n      {userAnswers.length === TOTAL_QUESTIONS ? <button className='start' onClick={startQuizHandler}>PLAY AGAIN</button> : null}\n      <p className='score'>Score: {score}</p>\n      {loading ? <p>Loading questions</p> : null}\n      {!loading && !quizOver ?\n        <QuestionCard\n        questionNumber={number+1}\n        totalQuestions={TOTAL_QUESTIONS}\n        question={questions[number].question}\n        options={questions[number].options}\n        userAnswer={userAnswers ? userAnswers[number] : undefined}\n        callback={checkAnswerHandler} />\n      : null}\n      {!loading && !quizOver && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? <button className='next' onClick={nextQuestionHandler}>Next Question</button> : null}\n    </Wrapper>\n  );\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}